import random
import json
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager

def get_random_question(questions):
    return random.choice(questions)

def random_delay(min_s=3, max_s=6):
    time.sleep(random.uniform(min_s, max_s))

# C√†i ƒë·∫∑t Chrome
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")

def delete_latest_comment(driver, comment_text):
    try:
        # T√¨m t·∫•t c·∫£ ƒëo·∫°n b√¨nh lu·∫≠n ch·ª©a n·ªôi dung v·ª´a comment
        comment_blocks = driver.find_elements(By.XPATH, f'//div[@dir="auto" and contains(text(), "{comment_text}")]')

        if comment_blocks:
            # Gi·∫£ s·ª≠ b√¨nh lu·∫≠n m·ªõi nh·∫•t l√† c√°i ƒë·∫ßu ti√™n t√¨m th·∫•y
            comment_div = comment_blocks[0]
            outer_div = comment_div.find_element(By.XPATH, "./ancestor::div[contains(@class, 'x1rg5ohu')][1]")

            # Hover ƒë·ªÉ hi·ªán d·∫•u ba ch·∫•m
            ActionChains(driver).move_to_element(outer_div).perform()
            time.sleep(1)

            # T√¨m n√∫t "H√†nh ƒë·ªông v·ªõi b√¨nh lu·∫≠n n√†y"
            more_btn = outer_div.find_element(By.XPATH, './/div[@aria-label="H√†nh ƒë·ªông v·ªõi b√¨nh lu·∫≠n n√†y"]')
            more_btn.click()
            time.sleep(1)

            # Nh·∫•n n√∫t "X√≥a"
            delete_btn = driver.find_element(By.XPATH, '//span[text()="X√≥a"]')
            delete_btn.click()
            time.sleep(1)

            # X√°c nh·∫≠n popup "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√¨nh lu·∫≠n n√†y kh√¥ng?"
            confirm_btn = driver.find_element(By.XPATH, '//div[@aria-label="X√≥a" or .//span[text()="X√≥a"]]')
            confirm_btn.click()
            print("üóëÔ∏è ƒê√£ x√≥a b√¨nh lu·∫≠n v·ª´a ƒëƒÉng.")

        else:
            print("‚ùó Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n v·ª´a ƒëƒÉng.")

    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a b√¨nh lu·∫≠n: {e}")


with webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) as driver:
    # ƒê·ªçc c·∫•u h√¨nh
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)

    post_links = config['posts']
    qtd_comment = config['qtd_comment']
    questions = config['questions']

    # ƒêƒÉng nh·∫≠p th·ªß c√¥ng
    driver.get("https://www.facebook.com/")
    input("‚úÖ Sau khi ƒëƒÉng nh·∫≠p th·ªß c√¥ng, nh·∫•n ENTER ƒë·ªÉ ti·∫øp t·ª•c...")

    for link in post_links:
        print(f"\n‚û°Ô∏è ƒêang comment v√†o: {link}")
        try:
            driver.get(link)
            time.sleep(6)
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)

            # T√¨m √¥ nh·∫≠p b√¨nh lu·∫≠n
            xpaths = [
                '//div[@role="textbox" and @contenteditable="true"]',
                '//div[@data-lexical-editor="true"]',
            ]

            comment_box = None
            for xpath in xpaths:
                try:
                    comment_box = driver.find_element(By.XPATH, xpath)
                    if comment_box:
                        break
                except:
                    continue

            if comment_box:
                driver.execute_script("arguments[0].scrollIntoView(true);", comment_box)
                time.sleep(1)
                ActionChains(driver).move_to_element(comment_box).click().perform()

                for i in range(qtd_comment):
                    random_comment = get_random_question(questions)
                    comment_box.send_keys(random_comment)
                    time.sleep(1)
                    comment_box.send_keys(Keys.ENTER)
                    print(f"‚úÖ ƒê√£ comment {i+1}/{qtd_comment}: {random_comment}")
                    time.sleep(3)  # Ch·ªù Facebook render b√¨nh lu·∫≠n

                    # delete_latest_comment(driver, random_comment)

                    random_delay(4,10)

            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y √¥ b√¨nh lu·∫≠n.")

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt: {e}")

        print("‚è≥ Ch·ªù tr∆∞·ªõc khi qua b√†i ti·∫øp theo...\n")
        time.sleep(5)

    print("üéâ Ho√†n t·∫•t t·∫•t c·∫£ b√†i vi·∫øt!")
    time.sleep(3)
